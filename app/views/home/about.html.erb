<h1>Small Documentation on functionality</h1>
<ul>
  <li><a href="#tools">Tools Used</a></li>
  <li><a href="#home">Home Page</a></li>
  <li><a href="#reservations">Reservations</a></li>
  <li><a href="#users">Users</a></li>
  <li><a href="#cars">Cars</a></li>
  <li><a href="#coverage">Test Coverage</a></li>
  <li><a href="#outro">Outro</a></li>
</ul>

<h2 id="tools"> Tools Used</h2>
<p>
  <ul>
    <li>Twitter Bootstrap</li>
    <li>Twitter Bootstrap DateTime Picker</li>
    <li>PostgresSQL</li>
    <li>Heroku</li>
    <li>Rspec and FactoryGirl</li>
  </ul>

  <p>Twitter Bootstrap is a free, powerfull and easy to use tool for creating UI. Twitter Bootstrap DateTime Picker is easily integrated to it and is using JQuery, so using them in pair saves time and effort.</p>
  <p>PostgresSQL was chosen because it's an advanced version of SQL which can be very helpful with complex sql queries and unsual data storage like hstore datatype, which grants possibility to store hashes in db.</p>
  <p>Heroku is good service for freely hosting dev apps and helps in presentation of projects.</p>
  <p>Rspec is used as testing framework and FactoryGirl makes it easier to populate testing db.</p>
</p>

<h2 id="home">Home Page</h2>
<p>
  <p>All reservations are separated by days. I selected this approach in order to make UI more intuitive and ordered. If i just throw everything in one table with date and time in each cell, then data becomes pretty much unreadable for users. Just imagine the list of multiple "2017-07-12 10:00 - 2017-07-12 18:00" records in each cell and you will find it hard to focus your attention on time, because you will need to understand which day it is first. </p>
  
  <p>Navigation form allows you navigate through days and browse table for each day separatedly. Default value is today.</p>

  <p>Table column headers contains currently selected date and a list of car plate numbers. Table row headers contain user names. Table contents is a list of time periods in 24h format, which represents reservation time</p>

  <p>'New Reservation' form allows to create new reservations and also helps to resolve creation conflicts with notifications</p>
</p>

<h2 id="reservations">Reservations</h2>
<p>
  <p>Reservations has 4 fields- User, Car, Start Date and Time and End Date and Time.</p>
  <p>Reservation has some rules when created:
    <ul>
      <li>Start and End dates can't be blank</li>
      <li>Start date can't be greater than End date</li>
      <li>Selected time period cant cover multiple days (as it will be hard to represent within 'day by day' table and not misguide user)</li>
      <li>Time period can't overlap with existing reservations</li>
    </ul>
  </p>
  <p>When creating reservation it will automatically navigate you to your selected day. For example: if we are browsing 2017-07-11 and create a reservation for 2017-07-13 we will be redirected to that date in order to help us resolve conflicts or browse successful creation.</p>
  <p>If someone else will create or remove reservation at the page we are browsing- it will automatically update that element using Rails Channel functionality.</p>
  <p>Reservations are destroy dependent on User and Car. If we destroy a user or a car it will remove all related reservations.</p>
  <p>Reservations can be removed from Show User page, where all user related reservations are registered. Cars dont have similar functionality, because the system will be used by users and not by cars, therefore it is more logical for user to find himself and remove his reservation from his own profile (even though his profile is publicly accessible)</p>
</p>

<h2 id="users">Users</h2>
<p>
  <p>Users were generated with rails scaffold. There were added basic styling and reservation table to each user profile. Users support CRUD functionality.</p>
</p>

<h2 id="cars">Cars</h2>
<p>
  <p>Cars were also generated with rails scaffold. There was added only basic styling to them. Cars support CRUD functionality just like users.</p>
</p>


<h2 id="coverage">Test Coverage</h2>
<p>
  <p>Test Coverage is generated by Simplecov gem and allows to monitor how much code was tested.</p>
</p>

<h2 id="outro">Outro</h2>
<p>
  <p>Task was made in approximately 12 hours + this documentation writing and deploying to heroku time</p>
  <p>Made by <b>Ilja Jemeljanovs</b></p>
</p>

